<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用HEXO在LINUX服务器中搭建个人博客</title>
      <link href="/2024/07/18/%E5%88%A9%E7%94%A8HEXO%E5%9C%A8LINUX%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/07/18/%E5%88%A9%E7%94%A8HEXO%E5%9C%A8LINUX%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>本文所使用服务器为腾讯云服务器，2核2G，操作系统为CentOS 7.6</p><h1 id="配置本地环境"><a href="#配置本地环境" class="headerlink" title="配置本地环境"></a>配置本地环境</h1><p>本文使用win11操作系统的笔记本作为本地计算机</p><p><u><strong>注意：配置本地环境的所有命令行操作均在本地计算机完成，而非服务器端</strong></u></p><h2 id="git环境搭建"><a href="#git环境搭建" class="headerlink" title="git环境搭建"></a>git环境搭建</h2><p>前往git官网下载对应版本的git</p><p><a href="https://git-scm.com/download/win">点此前往git官网</a></p><p>安装时可按默认设置安装</p><p>安装完成后于空白桌面shift+右键，选择Git Bash Here</p><p>输入以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.emall &quot;xxx@xxx.com&quot;  #xxx@xxx.com 改为你的邮箱</span><br><span class="line">git config --global user.name &quot;xxx&quot; #xxx改为你的昵称</span><br></pre></td></tr></table></figure><p>此处的邮箱和名称用于标识信息</p><p>若提示出现 <em>git 不是内部或外部命令，也不是可运行的程序</em>，可进行以下的操作</p><p>​找到git安装路径里bin和git-code的位置，如：</p><p>​D:\Program Files\Git\bin</p><p>​D:\Program Files\Git\mingw64\libexec\git-core</p><p>​打开设置-系统-系统信息-高级系统设置-环境变量，点击Path进行编辑，将上面两个地址分别添加进Path变量中。<strong>如图</strong></p><p><img src="/img/image-20240717234834962.png" alt="image-20240717234834962"></p><p>​设置完成后重新进行Git Bash的输入即可</p><h2 id="Node-js-和-npm的安装"><a href="#Node-js-和-npm的安装" class="headerlink" title="Node.js 和 npm的安装"></a>Node.js 和 npm的安装</h2><p>进入node.js的[官网](<a href="https://nodejs.org/zh-cn">Node.js — 在任何地方运行 JavaScript (nodejs.org)</a>)下载并安装Node.js，一般采用默认设置即可</p><p>安装完成后可以进入git bash或CMD中输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>检查是否安装成功。若返回版本信息，则说明安装成功</p><h2 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h2><p>新建一个空白文件夹作为网站配置文件的存放目录。本文以<code>D:\Blog</code>为例。</p><p>进入文件夹，shift+右键打开git bash，输入如下命令进行Hexo的安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli hexo-server</span><br></pre></td></tr></table></figure><p>hexo-cli和hexo-server分别为客户端模块和服务器模块，支持本地服务器生成网页</p><h2 id="本地初始化博客站点"><a href="#本地初始化博客站点" class="headerlink" title="本地初始化博客站点"></a>本地初始化博客站点</h2><p>在<code>D:\Blog</code>中使用git bash，输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog #myblog可自定义,本文以此为例</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这里用npm安装的hexo-deployer-git为自动部署至远程git仓库的插件</p><p>初始化完成后会在<code>myblog</code>文件夹下生成目录</p><p>其中的<code>_config.yml</code>文件是站点的配置文件</p><h3 id="测试网页"><a href="#测试网页" class="headerlink" title="测试网页"></a>测试网页</h3><p>在Git Bash或cmd中输入命令<em>（注意二者的位置必须在</em><code>D:\Blog\myblog</code><em>中，若不在，需要cd至此目录）</em></p><p>在浏览器的地址栏输入 <a href="http://localhost:4000/">http://localhost:4000</a> 即可访问hexo的默认页面</p><p><img src="/img/image-20240718001632015.png" alt="image-20240718001632015"></p><p>此说明本地初始化成功</p><p>在命令栏中按ctrl+c即可停止网页生成</p><p>到此本地环境配置完成</p><h1 id="配置服务端环境"><a href="#配置服务端环境" class="headerlink" title="配置服务端环境"></a>配置服务端环境</h1><p><strong><u>注意：此条以下的所有指令操作若无特殊说明均是在服务器上完成</u></strong></p><h2 id="服务器初始设置"><a href="#服务器初始设置" class="headerlink" title="服务器初始设置"></a>服务器初始设置</h2><p>记录服务器的公网ip，开放80，443，22端口</p><h2 id="本地计算机访问实例"><a href="#本地计算机访问实例" class="headerlink" title="本地计算机访问实例"></a>本地计算机访问实例</h2><p>在本地计算机安装WinSCP</p><p>打开cmd，输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@服务器公网ip</span><br></pre></td></tr></table></figure><p>并键入密码，与服务器建立对话，即可使用cmd操作服务器的系统，如图</p><p><img src="/img/image-20240718003308550.png" alt="image-20240718003308550"></p><p>打开WinSCP，新建站点，使用SFTP协议，主机名为服务器公网IP，用户名为root，密码为自己设置的root密码，端口号22</p><p>登录后即可在WinSCP中进行文件的上传下载</p><h2 id="创建Hexo部署目录"><a href="#创建Hexo部署目录" class="headerlink" title="创建Hexo部署目录"></a>创建Hexo部署目录</h2><p>cmd连接实例后使用如下指令创建Hexo部署目录，博客的相关文件会储存于此。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/www/hexo</span><br></pre></td></tr></table></figure><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>I.在cmd中依次输入以下命令，调用yum安装nginx的依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p>gcc-c++为编译nginx源码所需的编译器；</p><p>pcre为正则表达式的支持库；</p><p>zlib为压缩算法的支持库；</p><p>Nginx支持http与https协议，如需实现https协议需要用到openssl库。</p><p>II.本文以1.20.2版本的nginx为例，在cmd中输入指令下载nginx</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://nginx.org/download/nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>.tar.gz     #用wget命令下载源代码的压缩包</span><br><span class="line">tar -zxvf nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>.tar.gz -C /usr/local     #解压压缩包至/usr/local目录下</span><br></pre></td></tr></table></figure><p>此时在WinSCP中刷新后应该可以看到<code>/usr/local</code>目录下多出了解压后的nginx-1.20.2</p><p>cd进入此目录，执行配置文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span></span><br><span class="line">./configure --with-http_ssl_module     #http_ssl_module为https模块</span><br></pre></td></tr></table></figure><p>编译安装nginx</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装目录默认为&#x2F;usr&#x2F;local&#x2F;nginx</p><p>cd进入sbin目录，启动nginx。启动成功不会显示任何信息，已启动nginx后再次尝试启动会报错</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line">./nginx -v     #显示nginx版本号，说明安装成功</span><br><span class="line">./nginx     #启动nginx</span><br></pre></td></tr></table></figure><p>地址栏中输入<code>http://你的服务器ip:80</code>即可看到nginx的欢迎页面</p><p>常用nginx指令，请cd至sbin目录使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop     #关闭nginx</span><br><span class="line">./nginx -s reload      #重载nginx</span><br><span class="line">./nginx -t      #检查nginx配置文件的语法是否有错误，常在修改配置文件后执行配置Nginx反向代理</span><br></pre></td></tr></table></figure><h2 id="配置Nginx反向代理"><a href="#配置Nginx反向代理" class="headerlink" title="配置Nginx反向代理"></a>配置Nginx反向代理</h2><p>在WinSCP中进入nginx配置文件目录<code>/usr/local/nginx/conf</code>，右键nginx.conf编辑</p><p>在server语句块中修改</p><p><img src="/img/image-20240718005428160.png" alt="image-20240718005428160"></p><p>server_name为虚拟服务器的识别标志，修改为自己注册的域名<br>root为部署根目录（即用户访问时网页文件所在的目录），修改为前面创建的Hexo部署目录，如 &#x2F;home&#x2F;www&#x2F;hexo<br>修改完成后检查语法并重载nginx。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./nginx -t</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>调用yum安装Git</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br><span class="line">git --vesion     #显示git版本号，说明安装成功</span><br></pre></td></tr></table></figure><h2 id="添加git用户"><a href="#添加git用户" class="headerlink" title="添加git用户"></a>添加git用户</h2><p>root默认权限过大，在此添加一个名为git的用户，用于将博客部署到服务器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd git     #添加名为git的用户</span><br><span class="line">passwd git     #修改git用户的密码</span><br></pre></td></tr></table></figure><p>为git授予sudo权限</p><p>用WinSCP打开<code>/etc</code>目录下的 <code>sudoers </code>文件，在 <code>root ALL=(ALL) ALL </code>语句下添加<code> git ALL=(ALL) ALL</code> ，如图所示。</p><p><img src="/img/image-20240718005955892.png" alt="image-20240718005955892"></p><h2 id="为git添加ssh密钥"><a href="#为git添加ssh密钥" class="headerlink" title="为git添加ssh密钥"></a>为git添加ssh密钥</h2><p>在本地生成一对密钥文件（分别是公钥和私钥），将公钥文件上传到服务器上；服务器收到连接请求时，会将本地的公钥与服务器的公钥进行比对，用私钥解密服务器发来的一段信息并将其发回，验证通过后准许连接。</p><h3 id="密钥对生成"><a href="#密钥对生成" class="headerlink" title="密钥对生成"></a>密钥对生成</h3><p>在本地计算机上打开Git Bash，生成密钥对</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>此处会提示输密码，可不填，直接回车</p><p>运行完成会在<code>C:\Users\用户名</code>目录下生成<code>.ssh</code>文件夹，文件夹内的<code>id_rsa</code>为私钥文件，<code>id_rsa.pub</code> 为公钥文件。</p><h2 id="公钥放置"><a href="#公钥放置" class="headerlink" title="公钥放置"></a>公钥放置</h2><p>在linux下，文件名以小数点开头的文件被视为隐藏文件，在WinSCP中设置显示隐藏文件以方便后续操作。打开WinSCP–选项–选项–面板，勾选“显示隐藏文件”，如图所示。</p><p><img src="/img/image-20240718010340768.png" alt="image-20240718010340768"></p><p>在<code>/home/git</code>目录下右键新建名为<code>.ssh</code>的文件夹，并在该文件夹内新建名为<code>authorized_keys</code>的文件，将之前生成的公钥文件中的所有内容复制进去，保存。</p><p>cmd连接实例并登录root账户，设置权限</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">600</span> /home/git/.ssh/authorized_keys</span><br><span class="line">chmod <span class="number">700</span> /home/git/.ssh</span><br></pre></td></tr></table></figure><p>移交<code>.ssh</code>文件夹的所有权给git</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /home/git/.ssh</span><br></pre></td></tr></table></figure><p>测试能否使用ssh免密登录服务器。打开新的cmd</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@xxx.xxx.xxx.xxx     #git@后填写服务器的公网ip</span><br></pre></td></tr></table></figure><p>若无需密码，则配置成功</p><h2 id="创建Git仓库并配置自动部署"><a href="#创建Git仓库并配置自动部署" class="headerlink" title="创建Git仓库并配置自动部署"></a>创建Git仓库并配置自动部署</h2><p>自动部署的核心在于git-hooks（钩子），可以理解为一种脚本，在特定条件下触发时会调用钩子并执行钩子文件中的内容。</p><p>cmd登录root用户，新建目录并创建Git仓库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/repo     #该目录为git仓库所在的位置，可根据喜好自行设置</span><br><span class="line"><span class="built_in">cd</span> /home/repo     #进入该目录</span><br><span class="line">git init --bare blog.git     #创建一个名为blog的仓库，--bare参数为创建裸库</span><br></pre></td></tr></table></figure><p>在WinSCP中进入<code>/home/repo/blog.git/hooks</code>目录，找到<code>post-receive</code>钩子文件（若无则新建）。</p><p>右键编辑，输入<code>git --work-tree=/home/www/hexo --git-dir=/home/repo/blog.git checkout -f</code>并保存。（work-tree填写hexo的部署目录，git-dir填写Git仓库的目录）</p><p>这里使用的是<code>post-receive</code>钩子，当Git收到push请求的时候就会调用这个钩子。这个钩子中添加的语句执行的操作为：删除hexo部署目录中原有的文件，然后将Git仓库中的内容clone至hexo部署目录下。这样我们在本地更新博客并且执行部署命令后，网页文件会被push至服务器的Git仓库内，钩子文件则会将Git仓库内的网页文件复制到hexo部署目录下，从而实现自动部署功能。</p><p>为钩子和Git仓库配置权限</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/repo/blog.git/hooks/post-receive     #为钩子文件授予可执行权限（+x）</span><br><span class="line">chown -R git:git /home/repo     #将仓库目录的所有权移交给git用户</span><br><span class="line">chown -R git:git /home/www/hexo     #将hexo部署目录的所有权移交给git用户</span><br></pre></td></tr></table></figure><h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><h2 id="Hexo部署插件安装和配置"><a href="#Hexo部署插件安装和配置" class="headerlink" title="Hexo部署插件安装和配置"></a>Hexo部署插件安装和配置</h2><p>打开本地计算机的hexo目录<code>D:\Blog\myblog</code>，打开<code>_config,yml</code>，修改<code>deploy</code>语句</p><p><img src="/img/image-20240718011543641.png" alt="image-20240718011543641"></p><p>按图修改，repo改为<code>git@服务器公网ip:git仓库目录</code></p><p>执行部署命令时，hexo就会用git用户登录服务器，并将生成的网页文件push到服务器的git仓库中。</p><p>输入命令生成网页并部署到服务器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>在WinSCP中进入服务器的<code>/home/www/hexo</code>目录并刷新，查看是否出现文件。若有则说明hexo的部署插件及服务器的Git自动部署运行正常。</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>进入域名管理后台把自己注册的域名指向主机公网ip即可</p><p>至此博客的搭建便已完成</p><p>本文参考了作者：<strong>Cream薄荷糖</strong>的文章，以下为其链接</p><p><a href="https://creammint.github.io/posts/357/index.html"> Cream薄荷糖 (creammint.github.io)</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> linux </tag>
            
            <tag> nings </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
